name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  DJANGO_IMAGE_NAME: ${{ github.repository }}/django-app
  FASTAPI_IMAGE_NAME: ${{ github.repository }}/fastapi-app

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: shared_auth_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    env:
      # 为GitHub Actions环境设置数据库连接参数
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: shared_auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_URL: redis://localhost:6379/0
      DEBUG: True
      SECRET_KEY: test-secret-key-for-ci
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-django.txt
          pip install -r requirements-fastapi.txt
          pip install -r requirements-tests.txt
          # 安装测试所需的系统工具
          sudo apt-get update
          sudo apt-get install -y postgresql-client redis-tools
      
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      
      - name: Wait for Redis to be ready
        run: |
          until redis-cli -h localhost ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
      
      - name: Run Django migrations
        run: |
          cd django_app
          python manage.py migrate
          python manage.py check
      
      - name: Run Django tests
        run: |
          cd django_app
          python manage.py test
      
      - name: Run FastAPI tests
        run: |
          cd fastapi_app
          pytest -xvs
  
  integration-test:
    name: Run Integration Tests
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v2
      
      - name: Build and run services
        run: |
          docker-compose up -d
          sleep 30  # 等待服务启动并完成初始化
      
      - name: Wait for services to be healthy
        run: |
          timeout 120 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 5; done'
      
      - name: Run integration tests
        run: |
          docker-compose run --rm tests
      
      - name: Show service logs on failure
        if: failure()
        run: |
          docker-compose logs django
          docker-compose logs fastapi
          docker-compose logs postgres
          docker-compose logs redis
      
      - name: Cleanup
        if: always()
        run: docker-compose down -v
  
  build-and-push:
    name: Build and Push Docker Images
    needs: [test, integration-test]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Django image
        id: meta-django
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.DJANGO_IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      
      - name: Extract metadata for FastAPI image
        id: meta-fastapi
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.FASTAPI_IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      
      - name: Build and push Django image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/django.Dockerfile
          push: true
          tags: ${{ steps.meta-django.outputs.tags }}
          labels: ${{ steps.meta-django.outputs.labels }}
      
      - name: Build and push FastAPI image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/fastapi.Dockerfile
          push: true
          tags: ${{ steps.meta-fastapi.outputs.tags }}
          labels: ${{ steps.meta-fastapi.outputs.labels }}

